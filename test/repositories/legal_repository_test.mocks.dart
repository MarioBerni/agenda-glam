// Mocks generated by Mockito 5.4.6 from annotations
// in agenda_glam/test/repositories/legal_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:agenda_glam/data/models/legal_consent_model.dart' as _i6;
import 'package:agenda_glam/data/models/legal_document_model.dart' as _i4;
import 'package:agenda_glam/data/services/legal_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LegalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLegalService extends _i1.Mock implements _i2.LegalService {
  MockLegalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getCurrentDocumentVersion(_i4.LegalDocumentType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentDocumentVersion, [type]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#getCurrentDocumentVersion, [type]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<_i4.LegalDocumentModel?> getActiveDocument(
    _i4.LegalDocumentType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveDocument, [type]),
            returnValue: _i3.Future<_i4.LegalDocumentModel?>.value(),
          )
          as _i3.Future<_i4.LegalDocumentModel?>);

  @override
  _i3.Future<void> registerConsent({
    required String? userId,
    String? ipAddress,
    String? termsVersion,
    String? privacyPolicyVersion,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registerConsent, [], {
              #userId: userId,
              #ipAddress: ipAddress,
              #termsVersion: termsVersion,
              #privacyPolicyVersion: privacyPolicyVersion,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> needsToAcceptNewTerms(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#needsToAcceptNewTerms, [userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i6.LegalConsentModel>> getUserConsentHistory(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserConsentHistory, [userId]),
            returnValue: _i3.Future<List<_i6.LegalConsentModel>>.value(
              <_i6.LegalConsentModel>[],
            ),
          )
          as _i3.Future<List<_i6.LegalConsentModel>>);

  @override
  _i3.Future<List<_i4.LegalDocumentModel>> getDocumentVersionHistory(
    _i4.LegalDocumentType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentVersionHistory, [type]),
            returnValue: _i3.Future<List<_i4.LegalDocumentModel>>.value(
              <_i4.LegalDocumentModel>[],
            ),
          )
          as _i3.Future<List<_i4.LegalDocumentModel>>);

  @override
  _i3.Future<void> createNewDocumentVersion({
    required _i4.LegalDocumentType? type,
    required String? version,
    required String? title,
    required String? content,
    String? documentUrl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createNewDocumentVersion, [], {
              #type: type,
              #version: version,
              #title: title,
              #content: content,
              #documentUrl: documentUrl,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
